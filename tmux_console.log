Total number of experiments: 288
Using all GPUs to conduct a grid search in parallel.
Seed set to 17
Seed set to 17
GPU available: True (cuda), used: True
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 57.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
57.5 K    Trainable params
0         Non-trainable params
57.5 K    Total params
0.230     Total estimated model params size (MB)

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 27.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
27.3 K    Trainable params
0         Non-trainable params
27.3 K    Total params
0.109     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.063
Metric Loss/val improved. New best score: 0.246
Metric Loss/val improved by 0.014 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved by 0.030 >= min_delta = 0.0. New best score: 0.216
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.023 >= min_delta = 0.0. New best score: 0.193
Metric Loss/val improved by 0.027 >= min_delta = 0.0. New best score: 0.166
Metric Loss/val improved by 0.107 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.043
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 82.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
82.5 K    Trainable params
0         Non-trainable params
82.5 K    Total params
0.330     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 57.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
57.5 K    Trainable params
0         Non-trainable params
57.5 K    Total params
0.230     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.078
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.076
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.042
Metric Loss/val improved by 0.018 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.046
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.042. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 52.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
52.3 K    Trainable params
0         Non-trainable params
52.3 K    Total params
0.209     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 27.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
27.3 K    Trainable params
0         Non-trainable params
27.3 K    Total params
0.109     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.258
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.046. Signaling Trainer to stop.
Metric Loss/val improved by 0.083 >= min_delta = 0.0. New best score: 0.175
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 82.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
82.5 K    Trainable params
0         Non-trainable params
82.5 K    Total params
0.330     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 134 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
134 K     Trainable params
0         Non-trainable params
134 K     Total params
0.539     Total estimated model params size (MB)
Metric Loss/val improved by 0.116 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved. New best score: 0.185
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.053 >= min_delta = 0.0. New best score: 0.132
Metric Loss/val improved by 0.050 >= min_delta = 0.0. New best score: 0.082
Metric Loss/val improved by 0.017 >= min_delta = 0.0. New best score: 0.066
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.045
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.065
Metric Loss/val improved by 0.015 >= min_delta = 0.0. New best score: 0.050
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.045. Signaling Trainer to stop.
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 52.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
52.3 K    Trainable params
0         Non-trainable params
52.3 K    Total params
0.209     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 27.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
27.3 K    Trainable params
0         Non-trainable params
27.3 K    Total params
0.109     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 159 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
159 K     Trainable params
0         Non-trainable params
159 K     Total params
0.639     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 134 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
134 K     Trainable params
0         Non-trainable params
134 K     Total params
0.539     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.232
Metric Loss/val improved. New best score: 0.069
Metric Loss/val improved by 0.110 >= min_delta = 0.0. New best score: 0.122
Metric Loss/val improved by 0.071 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.011 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.048
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.053. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 159 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
159 K     Trainable params
0         Non-trainable params
159 K     Total params
0.639     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 134 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
134 K     Trainable params
0         Non-trainable params
134 K     Total params
0.539     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.079
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.048. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 52.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
52.3 K    Trainable params
0         Non-trainable params
52.3 K    Total params
0.209     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 27.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
27.3 K    Trainable params
0         Non-trainable params
27.3 K    Total params
0.109     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.292
Metric Loss/val improved by 0.199 >= min_delta = 0.0. New best score: 0.093
Metric Loss/val improved by 0.034 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.027 >= min_delta = 0.0. New best score: 0.052
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.056
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.054
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.049
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.052. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 159 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
159 K     Trainable params
0         Non-trainable params
159 K     Total params
0.639     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 134 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
134 K     Trainable params
0         Non-trainable params
134 K     Total params
0.539     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.431
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 52.3 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
52.3 K    Trainable params
0         Non-trainable params
52.3 K    Total params
0.209     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 104 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
104 K     Trainable params
0         Non-trainable params
104 K     Total params
0.418     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.079
Metric Loss/val improved by 0.208 >= min_delta = 0.0. New best score: 0.224
Metric Loss/val improved by 0.018 >= min_delta = 0.0. New best score: 0.061
Metric Loss/val improved by 0.126 >= min_delta = 0.0. New best score: 0.098
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.052
Metric Loss/val improved by 0.046 >= min_delta = 0.0. New best score: 0.052
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.048
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.041
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.052. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 159 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
159 K     Trainable params
0         Non-trainable params
159 K     Total params
0.639     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 177 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
177 K     Trainable params
0         Non-trainable params
177 K     Total params
0.708     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.070
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.039
Metric Loss/val improved by 0.014 >= min_delta = 0.0. New best score: 0.056
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.044
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.043
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.039. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 129 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
129 K     Trainable params
0         Non-trainable params
129 K     Total params
0.518     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 104 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
104 K     Trainable params
0         Non-trainable params
104 K     Total params
0.418     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.064
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.043. Signaling Trainer to stop.
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.060
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 275 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
275 K     Trainable params
0         Non-trainable params
275 K     Total params
1.103     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 177 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
177 K     Trainable params
0         Non-trainable params
177 K     Total params
0.708     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.069
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.013 >= min_delta = 0.0. New best score: 0.056
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.050
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.058. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 129 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
129 K     Trainable params
0         Non-trainable params
129 K     Total params
0.518     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 104 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
104 K     Trainable params
0         Non-trainable params
104 K     Total params
0.418     Total estimated model params size (MB)
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 275 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
275 K     Trainable params
0         Non-trainable params
275 K     Total params
1.103     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.073
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 177 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
177 K     Trainable params
0         Non-trainable params
177 K     Total params
0.708     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.065
Metric Loss/val improved by 0.018 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.069
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.064
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.060
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 275 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
275 K     Trainable params
0         Non-trainable params
275 K     Total params
1.103     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 177 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
177 K     Trainable params
0         Non-trainable params
177 K     Total params
0.708     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.065
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.060. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 129 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
129 K     Trainable params
0         Non-trainable params
129 K     Total params
0.518     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 104 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
104 K     Trainable params
0         Non-trainable params
104 K     Total params
0.418     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 3.343
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.064
Metric Loss/val improved by 2.251 >= min_delta = 0.0. New best score: 1.092
Metric Loss/val improved by 0.760 >= min_delta = 0.0. New best score: 0.333
Metric Loss/val improved by 0.011 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.179 >= min_delta = 0.0. New best score: 0.154
Metric Loss/val improved by 0.035 >= min_delta = 0.0. New best score: 0.119
Metric Loss/val improved by 0.043 >= min_delta = 0.0. New best score: 0.076
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.053. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 275 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
275 K     Trainable params
0         Non-trainable params
275 K     Total params
1.103     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.482     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.071
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.076. Signaling Trainer to stop.
Metric Loss/val improved by 0.011 >= min_delta = 0.0. New best score: 0.060
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 129 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
129 K     Trainable params
0         Non-trainable params
129 K     Total params
0.518     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 31.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
31.6 K    Trainable params
0         Non-trainable params
31.6 K    Total params
0.127     Total estimated model params size (MB)
Metric Loss/val improved by 0.010 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved. New best score: 0.411
Metric Loss/val improved by 0.154 >= min_delta = 0.0. New best score: 0.257
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.256
Metric Loss/val improved by 0.089 >= min_delta = 0.0. New best score: 0.166
Metric Loss/val improved by 0.076 >= min_delta = 0.0. New best score: 0.090
Metric Loss/val improved by 0.035 >= min_delta = 0.0. New best score: 0.055
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.053
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.877     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.482     Total estimated model params size (MB)
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved. New best score: 0.106
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.045
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.045. Signaling Trainer to stop.
Metric Loss/val improved by 0.037 >= min_delta = 0.0. New best score: 0.069
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 56.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
56.6 K    Trainable params
0         Non-trainable params
56.6 K    Total params
0.226     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 31.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
31.6 K    Trainable params
0         Non-trainable params
31.6 K    Total params
0.127     Total estimated model params size (MB)
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.060
Metric Loss/val improved. New best score: 0.205
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.137 >= min_delta = 0.0. New best score: 0.068
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved by 0.015 >= min_delta = 0.0. New best score: 0.054
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.048
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.046
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.042
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.041
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.046. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.877     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.482     Total estimated model params size (MB)
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.041. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 56.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
56.6 K    Trainable params
0         Non-trainable params
56.6 K    Total params
0.226     Total estimated model params size (MB)
Seed set to 17
Metric Loss/val improved. New best score: 1.352
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 31.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
31.6 K    Trainable params
0         Non-trainable params
31.6 K    Total params
0.127     Total estimated model params size (MB)
Metric Loss/val improved by 1.004 >= min_delta = 0.0. New best score: 0.349
Metric Loss/val improved. New best score: 0.144
Metric Loss/val improved by 0.087 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved by 0.025 >= min_delta = 0.0. New best score: 0.323
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.048
Metric Loss/val improved by 0.093 >= min_delta = 0.0. New best score: 0.231
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.229
Metric Loss/val improved by 0.119 >= min_delta = 0.0. New best score: 0.111
Metric Loss/val improved by 0.031 >= min_delta = 0.0. New best score: 0.080
Metric Loss/val improved by 0.021 >= min_delta = 0.0. New best score: 0.059
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.048. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 56.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
56.6 K    Trainable params
0         Non-trainable params
56.6 K    Total params
0.226     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 31.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
31.6 K    Trainable params
0         Non-trainable params
31.6 K    Total params
0.127     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.308
Metric Loss/val improved by 0.157 >= min_delta = 0.0. New best score: 0.151
Metric Loss/val improved by 0.082 >= min_delta = 0.0. New best score: 0.069
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.059. Signaling Trainer to stop.
Metric Loss/val improved by 0.015 >= min_delta = 0.0. New best score: 0.054
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.877     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.482     Total estimated model params size (MB)
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved. New best score: 5.000
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 2.059 >= min_delta = 0.0. New best score: 2.941
Metric Loss/val improved by 1.112 >= min_delta = 0.0. New best score: 1.830
Metric Loss/val improved by 1.667 >= min_delta = 0.0. New best score: 0.162
Metric Loss/val improved by 0.049 >= min_delta = 0.0. New best score: 0.113
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.111
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 56.6 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
56.6 K    Trainable params
0         Non-trainable params
56.6 K    Total params
0.226     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 108 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
108 K     Trainable params
0         Non-trainable params
108 K     Total params
0.435     Total estimated model params size (MB)
Metric Loss/val improved by 0.039 >= min_delta = 0.0. New best score: 0.072
Metric Loss/val improved by 0.013 >= min_delta = 0.0. New best score: 0.060
Metric Loss/val improved. New best score: 0.162
Metric Loss/val improved by 0.029 >= min_delta = 0.0. New best score: 0.133
Metric Loss/val improved by 0.021 >= min_delta = 0.0. New best score: 0.111
Metric Loss/val improved by 0.019 >= min_delta = 0.0. New best score: 0.092
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.083
Metric Loss/val improved by 0.014 >= min_delta = 0.0. New best score: 0.069
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.060. Signaling Trainer to stop.
Metric Loss/val improved by 0.013 >= min_delta = 0.0. New best score: 0.056
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.877     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 193 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
193 K     Trainable params
0         Non-trainable params
193 K     Total params
0.775     Total estimated model params size (MB)
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved. New best score: 0.070
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.046
Metric Loss/val improved by 0.012 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.049
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.046. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 133 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
133 K     Trainable params
0         Non-trainable params
133 K     Total params
0.535     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 108 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
108 K     Trainable params
0         Non-trainable params
108 K     Total params
0.435     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.114
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Metric Loss/val improved by 0.017 >= min_delta = 0.0. New best score: 0.098
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 292 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
292 K     Trainable params
0         Non-trainable params
292 K     Total params
1.169     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 193 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
193 K     Trainable params
0         Non-trainable params
193 K     Total params
0.775     Total estimated model params size (MB)
Metric Loss/val improved by 0.010 >= min_delta = 0.0. New best score: 0.087
Metric Loss/val improved by 0.018 >= min_delta = 0.0. New best score: 0.070
Metric Loss/val improved. New best score: 0.079
Metric Loss/val improved by 0.024 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.064
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.054
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.049
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 133 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
133 K     Trainable params
0         Non-trainable params
133 K     Total params
0.535     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 108 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
108 K     Trainable params
0         Non-trainable params
108 K     Total params
0.435     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.131
Metric Loss/val improved by 0.039 >= min_delta = 0.0. New best score: 0.092
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 292 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
292 K     Trainable params
0         Non-trainable params
292 K     Total params
1.169     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 193 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
193 K     Trainable params
0         Non-trainable params
193 K     Total params
0.775     Total estimated model params size (MB)
Metric Loss/val improved by 0.012 >= min_delta = 0.0. New best score: 0.080
Metric Loss/val improved. New best score: 0.140
Metric Loss/val improved by 0.067 >= min_delta = 0.0. New best score: 0.073
Metric Loss/val improved by 0.025 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.014 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.051
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.050
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 133 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
133 K     Trainable params
0         Non-trainable params
133 K     Total params
0.535     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 108 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
108 K     Trainable params
0         Non-trainable params
108 K     Total params
0.435     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 2.758
Metric Loss/val improved by 2.424 >= min_delta = 0.0. New best score: 0.334
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Metric Loss/val improved by 0.063 >= min_delta = 0.0. New best score: 0.271
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 292 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
292 K     Trainable params
0         Non-trainable params
292 K     Total params
1.169     Total estimated model params size (MB)
Metric Loss/val improved by 0.145 >= min_delta = 0.0. New best score: 0.125
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 193 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
193 K     Trainable params
0         Non-trainable params
193 K     Total params
0.775     Total estimated model params size (MB)
Metric Loss/val improved by 0.036 >= min_delta = 0.0. New best score: 0.090
Metric Loss/val improved. New best score: 0.108
Metric Loss/val improved by 0.034 >= min_delta = 0.0. New best score: 0.056
Metric Loss/val improved by 0.033 >= min_delta = 0.0. New best score: 0.075
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.073
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.010 >= min_delta = 0.0. New best score: 0.063
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.058
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.053. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.054

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 133 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
133 K     Trainable params
0         Non-trainable params
133 K     Total params
0.535     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 57.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
57.5 K    Trainable params
0         Non-trainable params
57.5 K    Total params
0.230     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.068
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.048
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.054. Signaling Trainer to stop.
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.047
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 292 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
292 K     Trainable params
0         Non-trainable params
292 K     Total params
1.169     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.549     Total estimated model params size (MB)
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.041
Metric Loss/val improved. New best score: 0.067
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.051
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.041. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 82.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
82.5 K    Trainable params
0         Non-trainable params
82.5 K    Total params
0.330     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 57.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
57.5 K    Trainable params
0         Non-trainable params
57.5 K    Total params
0.230     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.060
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.048
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.043
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.048. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.943     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.549     Total estimated model params size (MB)
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.043. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 82.5 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
82.5 K    Trainable params
0         Non-trainable params
82.5 K    Total params
0.330     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 117 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
117 K     Trainable params
0         Non-trainable params
117 K     Total params
0.472     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.102
Metric Loss/val improved. New best score: 0.085
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.098
Metric Loss/val improved by 0.019 >= min_delta = 0.0. New best score: 0.079
Metric Loss/val improved by 0.019 >= min_delta = 0.0. New best score: 0.066
Metric Loss/val improved by 0.024 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.063
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.055. Signaling Trainer to stop.
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.063. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.943     Total estimated model params size (MB)
Seed set to 17
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.549     Total estimated model params size (MB)
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 140 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
140 K     Trainable params
0         Non-trainable params
140 K     Total params
0.563     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 117 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
117 K     Trainable params
0         Non-trainable params
117 K     Total params
0.472     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 5.000
Metric Loss/val improved. New best score: 0.207
Metric Loss/val improved by 2.882 >= min_delta = 0.0. New best score: 2.118
Metric Loss/val improved by 1.553 >= min_delta = 0.0. New best score: 0.565
Metric Loss/val improved by 0.262 >= min_delta = 0.0. New best score: 0.303
Metric Loss/val improved by 0.063 >= min_delta = 0.0. New best score: 0.144
Metric Loss/val improved by 0.117 >= min_delta = 0.0. New best score: 0.187
Metric Loss/val improved by 0.062 >= min_delta = 0.0. New best score: 0.082
Metric Loss/val improved by 0.123 >= min_delta = 0.0. New best score: 0.063
Metric Loss/val improved by 0.016 >= min_delta = 0.0. New best score: 0.066
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.061
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.009 >= min_delta = 0.0. New best score: 0.050
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.058
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.058. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 140 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
140 K     Trainable params
0         Non-trainable params
140 K     Total params
0.563     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 45.1 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
45.1 K    Trainable params
0         Non-trainable params
45.1 K    Total params
0.180     Total estimated model params size (MB)
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.050. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.943     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.124
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.4 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.4 M     Trainable params
0         Non-trainable params
1.4 M     Total params
5.549     Total estimated model params size (MB)
Metric Loss/val improved by 0.046 >= min_delta = 0.0. New best score: 0.078
Metric Loss/val improved. New best score: 5.000
Metric Loss/val improved by 0.024 >= min_delta = 0.0. New best score: 0.054
Metric Loss/val improved by 2.281 >= min_delta = 0.0. New best score: 2.719
Metric Loss/val improved by 1.919 >= min_delta = 0.0. New best score: 0.800
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.359 >= min_delta = 0.0. New best score: 0.441
Metric Loss/val improved by 0.263 >= min_delta = 0.0. New best score: 0.178
Metric Loss/val improved by 0.059 >= min_delta = 0.0. New best score: 0.119
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Metric Loss/val improved by 0.049 >= min_delta = 0.0. New best score: 0.069
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 67.9 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
67.9 K    Trainable params
0         Non-trainable params
67.9 K    Total params
0.272     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 45.1 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
45.1 K    Trainable params
0         Non-trainable params
45.1 K    Total params
0.180     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.081
Metric Loss/val improved by 0.036 >= min_delta = 0.0. New best score: 0.045
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.069. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.943     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 293 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
293 K     Trainable params
0         Non-trainable params
293 K     Total params
1.173     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.330
Metric Loss/val improved by 0.091 >= min_delta = 0.0. New best score: 0.240
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.045. Signaling Trainer to stop.
Metric Loss/val improved by 0.059 >= min_delta = 0.0. New best score: 0.180
Seed set to 17
Metric Loss/val improved by 0.115 >= min_delta = 0.0. New best score: 0.065
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 67.9 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
67.9 K    Trainable params
0         Non-trainable params
67.9 K    Total params
0.272     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 45.1 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
45.1 K    Trainable params
0         Non-trainable params
45.1 K    Total params
0.180     Total estimated model params size (MB)
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.061
Metric Loss/val improved. New best score: 0.069
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.065
Metric Loss/val improved by 0.014 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.061
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.056
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.051
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.049
Seed set to 17
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.048
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 392 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
392 K     Trainable params
0         Non-trainable params
392 K     Total params
1.568     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 293 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
293 K     Trainable params
0         Non-trainable params
293 K     Total params
1.173     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.363
Metric Loss/val improved by 0.142 >= min_delta = 0.0. New best score: 0.221
Metric Loss/val improved by 0.120 >= min_delta = 0.0. New best score: 0.101
Metric Loss/val improved by 0.049 >= min_delta = 0.0. New best score: 0.052
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.048. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 67.9 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
67.9 K    Trainable params
0         Non-trainable params
67.9 K    Total params
0.272     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 45.1 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
45.1 K    Trainable params
0         Non-trainable params
45.1 K    Total params
0.180     Total estimated model params size (MB)
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.045
Metric Loss/val improved. New best score: 0.096
Metric Loss/val improved by 0.033 >= min_delta = 0.0. New best score: 0.063
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.045. Signaling Trainer to stop.
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.061
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 392 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
392 K     Trainable params
0         Non-trainable params
392 K     Total params
1.568     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 293 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
293 K     Trainable params
0         Non-trainable params
293 K     Total params
1.173     Total estimated model params size (MB)
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved. New best score: 0.777
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.332 >= min_delta = 0.0. New best score: 0.445
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.054
Metric Loss/val improved by 0.311 >= min_delta = 0.0. New best score: 0.134
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.051
Metric Loss/val improved by 0.069 >= min_delta = 0.0. New best score: 0.065
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.064
Metric Loss/val improved by 0.011 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.001 >= min_delta = 0.0. New best score: 0.052
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.051. Signaling Trainer to stop.
Metric Loss/val improved by 0.005 >= min_delta = 0.0. New best score: 0.048
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 67.9 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
67.9 K    Trainable params
0         Non-trainable params
67.9 K    Total params
0.272     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 122 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
122 K     Trainable params
0         Non-trainable params
122 K     Total params
0.489     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.185
Metric Loss/val improved by 0.051 >= min_delta = 0.0. New best score: 0.134
Metric Loss/val improved by 0.058 >= min_delta = 0.0. New best score: 0.075
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.074
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.047
Metric Loss/val improved by 0.021 >= min_delta = 0.0. New best score: 0.053
Metric Loss/val improved by 0.008 >= min_delta = 0.0. New best score: 0.045
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 392 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
392 K     Trainable params
0         Non-trainable params
392 K     Total params
1.568     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 293 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
293 K     Trainable params
0         Non-trainable params
293 K     Total params
1.173     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.437
Metric Loss/val improved by 0.328 >= min_delta = 0.0. New best score: 0.109
Metric Loss/val improved by 0.036 >= min_delta = 0.0. New best score: 0.073
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.045. Signaling Trainer to stop.
Metric Loss/val improved by 0.013 >= min_delta = 0.0. New best score: 0.061
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 145 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
145 K     Trainable params
0         Non-trainable params
145 K     Total params
0.581     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 122 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
122 K     Trainable params
0         Non-trainable params
122 K     Total params
0.489     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.118
Metric Loss/val improved by 0.004 >= min_delta = 0.0. New best score: 0.057
Metric Loss/val improved by 0.057 >= min_delta = 0.0. New best score: 0.061
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.054
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.054. Signaling Trainer to stop.
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.061. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 392 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
392 K     Trainable params
0         Non-trainable params
392 K     Total params
1.568     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.947     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 145 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
145 K     Trainable params
0         Non-trainable params
145 K     Total params
0.581     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 122 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
122 K     Trainable params
0         Non-trainable params
122 K     Total params
0.489     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.066
Metric Loss/val improved. New best score: 0.073
Metric Loss/val improved by 0.010 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.006 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.015 >= min_delta = 0.0. New best score: 0.058
Metric Loss/val improved by 0.000 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.055
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.053
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.049. Signaling Trainer to stop.
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.053. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.6 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.6 M     Trainable params
0         Non-trainable params
1.6 M     Total params
6.342     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.947     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 145 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
145 K     Trainable params
0         Non-trainable params
145 K     Total params
0.581     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 122 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
122 K     Trainable params
0         Non-trainable params
122 K     Total params
0.489     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.541
Metric Loss/val improved. New best score: 3.970
Metric Loss/val improved by 3.099 >= min_delta = 0.0. New best score: 0.871
Metric Loss/val improved by 0.529 >= min_delta = 0.0. New best score: 0.343
Metric Loss/val improved by 0.328 >= min_delta = 0.0. New best score: 0.214
Metric Loss/val improved by 0.168 >= min_delta = 0.0. New best score: 0.175
Metric Loss/val improved by 0.063 >= min_delta = 0.0. New best score: 0.151
Metric Loss/val improved by 0.042 >= min_delta = 0.0. New best score: 0.132
Metric Loss/val improved by 0.062 >= min_delta = 0.0. New best score: 0.089
Metric Loss/val improved by 0.073 >= min_delta = 0.0. New best score: 0.059
Metric Loss/val improved by 0.041 >= min_delta = 0.0. New best score: 0.048
Metric Loss/val improved by 0.007 >= min_delta = 0.0. New best score: 0.052
Metric Loss/val improved by 0.003 >= min_delta = 0.0. New best score: 0.049
Metric Loss/val improved by 0.002 >= min_delta = 0.0. New best score: 0.047
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.048. Signaling Trainer to stop.
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.6 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.6 M     Trainable params
0         Non-trainable params
1.6 M     Total params
6.342     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 1.5 M  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
1.5 M     Trainable params
0         Non-trainable params
1.5 M     Total params
5.947     Total estimated model params size (MB)
Monitored metric Loss/val did not improve in the last 6 records. Best score: 0.047. Signaling Trainer to stop.
Seed set to 17
Metric Loss/val improved. New best score: 5.000
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 145 K  | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
145 K     Trainable params
0         Non-trainable params
145 K     Total params
0.581     Total estimated model params size (MB)
Seed set to 17
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
HPU available: False, using: 0 HPUs
You are using a CUDA device ('NVIDIA RTX 6000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]

  | Name      | Type    | Params | Mode 
----------------------------------------------
0 | model     | Model   | 71.0 K | train
1 | criterion | MSELoss | 0      | train
----------------------------------------------
71.0 K    Trainable params
0         Non-trainable params
71.0 K    Total params
0.284     Total estimated model params size (MB)
Metric Loss/val improved. New best score: 0.112
Metric Loss/val improved by 0.041 >= min_delta = 0.0. New best score: 0.071
Metric Loss/val improved by 3.083 >= min_delta = 0.0. New best score: 1.917
Metric Loss/val improved by 0.018 >= min_delta = 0.0. New best score: 0.053
